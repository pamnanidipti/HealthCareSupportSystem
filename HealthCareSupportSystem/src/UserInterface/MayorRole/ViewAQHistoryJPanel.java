/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MayorRole;

import Business.AirQuality.AirQuality;
import Business.Enterprise.Enterprise;
import Business.Organization.EnvQualityCheckOrganization;
import Business.Organization.MayorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Pamnani
 */
public class ViewAQHistoryJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private MayorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    /**
     * Creates new form ViewAQHistoryJPanel
     */
    public ViewAQHistoryJPanel(JPanel userProcessContainer, UserAccount account, 
            MayorOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        populateAQHistory();
    }

    public void populateAQHistory()
    {
        DefaultTableModel model = (DefaultTableModel) AQHistoryTable.getModel();
        model.setRowCount(0);
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof EnvQualityCheckOrganization)
            {
                ArrayList<AirQuality> AQList = org.getAirQualityHistory().getAirQualityHistory();

            if (AQList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No records found. Please get data from AQ Monitors", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            for(AirQuality airQuality : AQList)
            {
                Object[] row = new Object[6];
                row[0] = airQuality.getMonitoredOn();
                row[1] = airQuality.getPollutionLevel();
                row[2] = airQuality.getTemperature();
                row[3] = airQuality.getHumidity();
                row[4] = airQuality.getVentilation();
                row[5] = airQuality.getStatus();
                model.addRow(row);
                        
            }
            }
        }
//        ArrayList<AirQuality> AQList = organization.getAirQualityHistory().getAirQualityHistory();
//
//            if (AQList.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "No records found. Please get data from AQ Monitors", "Error", JOptionPane.INFORMATION_MESSAGE);
//                return;
//            }
//            for(AirQuality airQuality : AQList)
//            {
//                Object[] row = new Object[6];
//                row[0] = airQuality.getMonitoredOn();
//                row[1] = airQuality.getPollutionLevel();
//                row[2] = airQuality.getTemperature();
//                row[3] = airQuality.getHumidity();
//                row[4] = airQuality.getVentilation();
//                row[5] = airQuality.getStatus();
//                model.addRow(row);
//                        
//            }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AQHistoryTable = new javax.swing.JTable();
        chartJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 3, 36)); // NOI18N
        jLabel1.setText("Air Quality History");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AQhist.jpg"))); // NOI18N

        AQHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Monitored On", "Pollution Level %", "Temprature (F)", "Humidity", "Ventilation", "AQStatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AQHistoryTable.setGridColor(new java.awt.Color(255, 255, 255));
        AQHistoryTable.setOpaque(false);
        AQHistoryTable.setSelectionBackground(new java.awt.Color(51, 255, 204));
        jScrollPane1.setViewportView(AQHistoryTable);

        chartJButton.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        chartJButton.setText("Analyze in Chart >>");
        chartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 316, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(chartJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(chartJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(78, 78, 78))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void chartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartJButtonActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset AQDataSet=new DefaultCategoryDataset();
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof EnvQualityCheckOrganization)
            {
        ArrayList<AirQuality> AQList = org.getAirQualityHistory().getAirQualityHistory();
        
        if(AQList.isEmpty() || AQList.size() == 1) {
            JOptionPane.showMessageDialog(this, "Analysis requires atleast 2 recorde", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for (AirQuality airQuality : AQList) {
            AQDataSet.addValue(airQuality.getPollutionLevel(),"PL", airQuality.getMonitoredOn());
            AQDataSet.addValue(airQuality.getTemperature(),"Temp", airQuality.getMonitoredOn());
            AQDataSet.addValue(airQuality.getHumidity(),"HM", airQuality.getMonitoredOn());
            AQDataSet.addValue(airQuality.getVentilation(),"VT", airQuality.getMonitoredOn());
        }
        JFreeChart AQChart= ChartFactory.createBarChart3D("Air Quality Chart", "TimeStamp", " Pollution Measures", AQDataSet, PlotOrientation.VERTICAL, true, false, false);
        AQChart.setBackgroundPaint(Color.white);
        CategoryPlot AQChartPlot = AQChart.getCategoryPlot();
        AQChartPlot.setBackgroundPaint(Color.lightGray);
        
        CategoryAxis AQDomainAxis = AQChartPlot.getDomainAxis();
        AQDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0));
        
        NumberAxis AQRangeAxis = (NumberAxis) AQChartPlot.getRangeAxis();
        AQRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        ChartFrame chartFrame = new ChartFrame("Chart", AQChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(500, 500);
            }
            }
    }//GEN-LAST:event_chartJButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AQHistoryTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton chartJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
