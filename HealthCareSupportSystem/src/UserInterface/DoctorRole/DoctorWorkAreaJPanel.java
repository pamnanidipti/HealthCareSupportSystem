/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.ReceptionistOrganization;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.security.auth.login.AccountException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pamnani
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Doctor doctor;
    private Patient patient;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        //this.patient=new Patient();
        nameLabel.setText(account.getPerson().getPersonName());
        for(Person person:organization.getPersonDirectory().getPersonHistory()){
            if(person.getPersonName().equals(userAccount.getPerson().getPersonName()))
            {
                if(person instanceof Doctor)
                {
                  doctor=(Doctor)person;
                }
            }
        }
//        System.out.println(doctor.getPersonName());
        
        //doctor=new Doctor();
        //if(userAccount.getPerson())
        //***********************works*************************
      /*  for(Person person:organization.getPersonDirectory().getPersonHistory()){
                 //doctor=new Doctor();
                 //doctor=(Doctor)person;
                // person=(Person)doctor;
              // doctor=person;
                 if(person instanceof Doctor)
               {
                   if(person.getPersonName().equals(account.getPerson().getPersonName()))
                 {
                     
                     doctor=(Doctor)person;
                 }
               }
            } */
      //*********************************************88  
        populateAppointmentTable();
        //populateOPDTimeTable();
    }

    public void populateAppointmentTable()
    {
      DefaultTableModel model = (DefaultTableModel)appointmentTable.getModel();
        
      model.setRowCount(0);  
      Object[] row = new Object[4];
      Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof ReceptionistOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            for(WorkRequest request:org.getWorkQueue().getWorkRequestList())
            {
                if(request instanceof AppointmentWorkRequest)
                {
                    AppointmentWorkRequest appRequest=(AppointmentWorkRequest)request;
                    if(appRequest.getReceiver().getPerson().getPersonName().equals(userAccount.getPerson().getPersonName()))
                    {
                     if(appRequest.getStatus().equals("Confirmed"))
                     {
                        row[0]=appRequest;
                        row[1]=appRequest.getRequestedTime();
                        row[2]=appRequest.getExaminedStatus();
                        row[3]=appRequest.getSender().getPerson().getPersonName();
                        model.addRow(row);
                     }
                    }
                }
            //userAccount.getWorkQueue().getWorkRequestList().add(request);
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        viewDetailsJButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        enterOrViewDetailsJButton = new javax.swing.JButton();
        examinedJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 3, 36)); // NOI18N
        jLabel1.setText("Doctor Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/doctor.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Appointments:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 265, -1, -1));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Problem", "Time", "Examined Status", "Patient Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentTable.setGridColor(new java.awt.Color(255, 255, 255));
        appointmentTable.setOpaque(false);
        appointmentTable.setSelectionBackground(new java.awt.Color(51, 255, 204));
        jScrollPane1.setViewportView(appointmentTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 293, 450, 91));

        viewDetailsJButton.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        viewDetailsJButton.setText("View Details >>");
        viewDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsJButtonActionPerformed(evt);
            }
        });
        add(viewDetailsJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 402, -1, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Welcome Dr.");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(219, 58, -1, -1));

        nameLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        nameLabel.setText("<<name>>");
        add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 58, -1, -1));

        enterOrViewDetailsJButton.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        enterOrViewDetailsJButton.setText("Enter/View Personal Details >>");
        enterOrViewDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterOrViewDetailsJButtonActionPerformed(evt);
            }
        });
        add(enterOrViewDetailsJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 220, -1));

        examinedJButton.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        examinedJButton.setText("Examined");
        examinedJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examinedJButtonActionPerformed(evt);
            }
        });
        add(examinedJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= appointmentTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(selectedRow > 0)
        {
        AppointmentWorkRequest appRequest = (AppointmentWorkRequest)appointmentTable.getValueAt(selectedRow, 0);
        if(appRequest.getExaminedStatus().equals("Examined"))
        {
            JOptionPane.showMessageDialog(this, "Patient has already been examined", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else
        {
        for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList())
        {
          for(Patient p:org.getPatientDirectory().getPatientHistory())
          {
              if(p.getPersonName().equals(appRequest.getSender().getPerson().getPersonName()))
              {
                  patient=p;
              }
          }
        }
        }
        }
        //Patient patient=(Patient)appointmentTable.getValueAt(selectedRow, 0);
        VitalSignHistoryJPanel panel = new VitalSignHistoryJPanel(userProcessContainer,userAccount,patient, enterprise);
        userProcessContainer.add("ViewDetails", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewDetailsJButtonActionPerformed

    private void enterOrViewDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterOrViewDetailsJButtonActionPerformed
        // TODO add your handling code here:
        EnterOrViewDetailsJPanel panel = new EnterOrViewDetailsJPanel(userProcessContainer,doctor,enterprise);
        userProcessContainer.add("EnterOrViewDetails", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_enterOrViewDetailsJButtonActionPerformed

    private void examinedJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examinedJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= appointmentTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
       
             if(selectedRow > 0)
             {
                 AppointmentWorkRequest appRequest=(AppointmentWorkRequest)appointmentTable.getValueAt(selectedRow, 0);  
                 if(appRequest.getExaminedStatus().equals("Examined"))
                 {
                     JOptionPane.showMessageDialog(this, "The Patient is already examined");
                 }
                 if(appRequest.getExaminedStatus().equals("Pending"))
                 {
                     appRequest.setExaminedStatus("Examined");
                     populateAppointmentTable();
                 }
                
             }  
        
        
    }//GEN-LAST:event_examinedJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton enterOrViewDetailsJButton;
    private javax.swing.JButton examinedJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton viewDetailsJButton;
    // End of variables declaration//GEN-END:variables
}
